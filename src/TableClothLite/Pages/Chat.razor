@implements IDisposable
@page "/chat"
@using System.Text
@using AngleSharp.Html.Parser
@using OpenAI
@using System.Xml
@using System.Net
@using TableClothLite.Services
@using Markdig
@inject OpenAIChatService ChatService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject FileDownloadService FileDownloader

<PageTitle>식탁보 라이트 Preview</PageTitle>

<div class="chat-container">
    <FluentCard class="chat-card">
        <!-- 헤더 영역 -->
        <div class="chat-header">
            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                <div class="chat-title">
                    <FluentIcon Value="@(new Icons.Regular.Size20.Bot())" />
                    <span>TableClothLite Preview AI</span>
                </div>
                <FluentSpacer />
                <div class="chat-actions">
                    <FluentButton Appearance="Appearance.Lightweight" OnClick="ResetConversation"
                                  IconStart="@(new Icons.Regular.Size16.New())" Title="새로운 대화 시작">
                        새 대화
                    </FluentButton>
                    <FluentButton Appearance="Appearance.Lightweight" OnClick="Logout"
                                  IconStart="@(new Icons.Regular.Size16.ArrowStepOut())" Title="로그아웃">
                        로그아웃
                    </FluentButton>
                </div>
            </FluentStack>
        </div>

        <!-- 메시지 컨테이너 -->
        <div class="messages-area">
            <div class="messages-container" id="messages">
                @if (!_messages.Any())
                {
                    <div class="welcome-message">
                        <FluentIcon Value="@(new Icons.Regular.Size48.Bot())" />
                        <h2>TableClothLite AI Preview</h2>
                        <p>금융과 공공 부문에 관한 질문에 답변해 드립니다. 궁금한 점을 질문해 보세요.</p>
                        <div class="disclaimer">
                            <FluentIcon Value="@(new Icons.Regular.Size20.Warning())" Class="warning-icon" />
                            <span>생성형 AI는 정보의 정확성을 보장하지 않습니다. 금융 결정은 반드시 전문가와 상담하세요.</span>
                        </div>
                    </div>
                }

                @foreach (var message in _messages)
                {
                    <div class="message-row @(message.IsUser ? "message-row-user" : "message-row-ai")">
                        @if (!message.IsUser)
                        {
                            <div class="avatar ai-avatar">
                                <FluentIcon Value="@(new Icons.Regular.Size20.Bot())" />
                            </div>
                        }
                        <FluentCard class="@(message.IsUser ? "user-message" : "ai-message")">
                            <div class="message-content">@FormatMessage(message.Content)</div>
                        </FluentCard>
                        @if (message.IsUser)
                        {
                            <div class="avatar user-avatar">
                                <FluentIcon Value="@(new Icons.Regular.Size20.Person())" />
                            </div>
                        }
                    </div>
                }
                @if (_isStreaming)
                {
                    <div class="message-row message-row-ai">
                        <div class="avatar ai-avatar">
                            <FluentIcon Value="@(new Icons.Regular.Size20.Bot())" />
                        </div>
                        <FluentCard class="ai-message">
                            <div class="message-content">
                                @FormatMessage(_currentStreamedMessage)
                                <span class="loading-indicator">
                                    @if (string.IsNullOrEmpty(_currentStreamedMessage))
                                    {
                                        <span>생각 중</span>
                                    }
                                    <FluentProgressRing Size="ProgressRingSize.Tiny" Visible="_isStreaming" />
                                </span>
                            </div>
                        </FluentCard>
                    </div>
                }
            </div>
        </div>

        <!-- 입력 영역 -->
        <div class="input-area">
            <FluentDivider />
            <div class="input-container">
                <textarea @oninput="OnInputChange"
                          value="@_userInput"
                          @onkeydown="HandleKeyDown"
                          Placeholder="금융과 공공 부문에 관한 질문을 입력하세요. Shift + Enter로 줄바꿈. 개인 정보는 입력하지 마세요."
                          Disabled="@_isStreaming"
                          Rows="3"
                          MaxLength="@_maxInputLength"
                          id="chatTextArea"
                          class="@(_isNearLimit ? "text-limit-warning" : string.Empty)">
                </textarea>
                <div class="input-actions">
                    <span class="character-count @(_isNearLimit ? "text-danger" : "text-muted")">
                        @(_userInput.Length) / @(_maxInputLength)
                    </span>
                    <FluentButton Appearance="Appearance.Accent"
                                  OnClick="SendMessage"
                                  Disabled="@(_isStreaming || string.IsNullOrWhiteSpace(_userInput))"
                                  IconStart="@(new Icons.Regular.Size20.Send())">
                        전송
                    </FluentButton>
                </div>
            </div>
        </div>
    </FluentCard>
</div>

<style type="text/css">
    /* 전체 컨테이너 */
    .chat-container {
        display: flex;
        flex-direction: column;
        height: calc(100vh - 130px);
        margin: -16px;
        overflow: hidden;
    }

    .chat-card {
        display: flex;
        flex-direction: column;
        flex: 1;
        overflow: hidden;
        box-shadow: none;
        border-radius: 0;
        border: none;
    }

    /* 헤더 영역 */
    .chat-header {
        padding: 12px 16px;
        border-bottom: 1px solid var(--neutral-stroke-rest);
        background-color: var(--neutral-layer-1);
        flex-shrink: 0;
    }

    .chat-title {
        display: flex;
        align-items: center;
        gap: 8px;
        font-weight: 600;
        font-size: 16px;
    }

    .chat-actions {
        display: flex;
        gap: 8px;
    }

    /* 메시지 영역 */
    .messages-area {
        flex: 1;
        overflow: hidden;
        position: relative;
        background-color: var(--neutral-layer-2);
    }

    .messages-container {
        height: 100%;
        overflow-y: auto;
        padding: 16px;
        display: flex;
        flex-direction: column;
        gap: 16px;
    }

    /* 웰컴 메시지 */
    .welcome-message {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        height: 100%;
        padding: 24px;
        gap: 16px;
        max-width: 600px;
        margin: 0 auto;
    }

        .welcome-message h2 {
            margin-top: 16px;
            margin-bottom: 8px;
            font-weight: 600;
        }

        .welcome-message p {
            color: var(--neutral-foreground-hint);
            margin-bottom: 24px;
        }

    .disclaimer {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 14px;
        padding: 12px 16px;
        border-radius: 4px;
        background-color: var(--neutral-layer-3);
        color: var(--neutral-foreground-rest);
        max-width: 500px;
        width: 100%;
    }

    .warning-icon {
        color: var(--warning-foreground-rest);
    }

    /* 메시지 행 */
    .message-row {
        display: flex;
        align-items: flex-start;
        gap: 8px;
        width: 100%;
        animation: fadeIn 0.3s ease-in-out;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .message-row-user {
        flex-direction: row-reverse;
    }

    /* 아바타 */
    .avatar {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 32px;
        height: 32px;
        border-radius: 50%;
        flex-shrink: 0;
        margin-top: 4px;
    }

    .ai-avatar {
        background-color: var(--accent-fill-rest);
        color: var(--foreground-on-accent-rest);
    }

    .user-avatar {
        background-color: var(--neutral-fill-rest);
        color: var(--neutral-foreground-rest);
    }

    /* 메시지 풍선 */
    .user-message, .ai-message {
        position: relative;
        border-radius: 16px;
        max-width: 80%;
        width: auto;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .user-message {
        background-color: var(--accent-fill-rest);
        color: var(--foreground-on-accent-rest);
        border-top-right-radius: 4px;
        margin-right: 8px;
    }

    .ai-message {
        background-color: var(--neutral-layer-1);
        color: var(--neutral-foreground-rest);
        border-top-left-radius: 4px;
        margin-left: 8px;
    }

    .message-content {
        padding: 12px 16px;
        overflow-wrap: break-word;
    }

        .message-content pre {
            background-color: var(--neutral-layer-3);
            border-radius: 4px;
            padding: 12px;
            overflow: auto;
            max-width: 100%;
            font-size: 14px;
        }

        .message-content code {
            background-color: var(--neutral-layer-3);
            border-radius: 3px;
            padding: 2px 4px;
            font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;
            font-size: 90%;
        }

        .message-content table {
            border-collapse: collapse;
            margin: 10px 0;
            max-width: 100%;
            overflow-x: auto;
            display: block;
        }

        .message-content th, .message-content td {
            border: 1px solid var(--neutral-stroke-strong-rest);
            padding: 8px;
            text-align: left;
        }

        .message-content blockquote {
            border-left: 4px solid var(--neutral-stroke-rest);
            margin: 0;
            padding-left: 10px;
            color: var(--neutral-foreground-hint);
        }

        .message-content img {
            max-width: 100%;
            height: auto;
        }

    /* 로딩 인디케이터 */
    .loading-indicator {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        margin-left: 8px;
        color: var(--neutral-foreground-hint);
    }

    /* 입력 영역 */
    .input-area {
        background-color: var(--neutral-layer-1);
        padding: 16px;
        flex-shrink: 0;
    }

    .input-container {
        position: relative;
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .input-actions {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .character-count {
        font-size: 12px;
        font-weight: 500;
    }

    .text-limit-warning {
        border-color: var(--warning-stroke-rest) !important;
    }

    .text-danger {
        color: var(--error-foreground-rest);
    }

    .text-muted {
        color: var(--neutral-foreground-hint);
    }

    /* 반응형 디자인 */
    @@media (max-width: 768px) {
        .chat-container {
            height: calc(100vh - 110px);
        }

        .user-message, .ai-message {
            max-width: 85%;
        }

        .chat-actions {
            gap: 4px;
        }
    }

    @@media (max-width: 576px) {
        .chat-container {
            height: calc(100vh - 100px);
        }

        .user-message, .ai-message {
            max-width: 90%;
        }

        .chat-title span {
            display: none;
        }
    }

    @@media (min-width: 992px) {
        .user-message, .ai-message {
            max-width: 70%;
        }

        .messages-container {
            padding: 24px;
        }
    }
</style>

<script type="text/javascript">
    // Chat.razor.js 파일 생성 또는 업데이트
    window.adjustChatLayout = function() {
    // 창 크기가 변경될 때 채팅 레이아웃 조절
    function updateChatLayout() {
    const viewportHeight = window.innerHeight;
    const chatWrapper = document.querySelector('.chat-wrapper');

    if (chatWrapper) {
    // 뷰포트 높이에 따라 동적으로 높이 조정
    // 헤더, 메시지 컨테이너, 여백 고려
    const headerHeight = 64;
    const messageContainerHeight = 60;
    const margins = 16;

    // 모바일 환경에서는 다른 값 적용
    let adjustedHeight = viewportHeight - (headerHeight + messageContainerHeight + margins);

    if (window.innerWidth <= 768) {
    adjustedHeight = viewportHeight - (headerHeight + messageContainerHeight);
    }

    chatWrapper.style.height = `${adjustedHeight}px`;
    }
    }

    // 초기 로드 시 실행
    updateChatLayout();

    // 창 크기 변경 시 실행
    window.addEventListener('resize', updateChatLayout);
    };

    class Helpers {
    static dotNetHelper;

    static setDotNetHelper(value) {
    Helpers.dotNetHelper = value;
    }

    static async openSandbox(url) {
    await Helpers.dotNetHelper.invokeMethodAsync('OpenSandbox', url);
    }
    }

    window.Helpers = Helpers;

    window.scrollToBottom = function (elementId) {
    const element = document.getElementById(elementId);
    if (element) {
    element.scrollTop = element.scrollHeight;
    }
    };

    window.downloadFileStream = async (fileName, contentType, dotNetStreamReference) => {
    const stream = await dotNetStreamReference.stream();
    const reader = stream.getReader();
    const chunks = [];

    // 데이터를 청크 단위로 읽기
    while (true) {
    const { done, value } = await reader.read();
    if (done) break;
    chunks.push(value);
    }

    // Blob 생성
    const blob = new Blob(chunks, { type: contentType });
    const url = URL.createObjectURL(blob);

    // 다운로드 처리
    const a = document.createElement("a");
    a.href = url;
    a.download = fileName;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);

    // 메모리 정리
    URL.revokeObjectURL(url);
    };

</script>

@code {
    // 기존 코드 유지
    private DotNetObjectReference<Chat>? dotNetHelper;
    private string _sessionId = Guid.NewGuid().ToString();
    private List<ChatMessage> _messages = [];
    private string _userInput = string.Empty;
    private bool _isStreaming = false;
    private string _currentStreamedMessage = string.Empty;
    private OpenAIClient? _client;
    private MarkdownPipeline? _markdownPipeline;
    private HtmlParser _htmlParser = new HtmlParser();

    // 글자 수 제한 관련 변수
    private readonly int _maxInputLength = 1000; // 최대 글자 수 제한
    private readonly int _warningThreshold = 100; // 제한에 근접했다고 경고할 잔여 글자 수 기준
    private bool _isNearLimit => _userInput.Length > _maxInputLength - _warningThreshold;

    protected override void OnInitialized()
    {
        _markdownPipeline = new MarkdownPipelineBuilder()
            .UseAdvancedExtensions()
            .UseBootstrap()
            .DisableHtml()
            .Build();
    }

    protected override async Task OnInitializedAsync()
    {
        // Check if we have an API key stored
        var apiKey = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "openRouterApiKey");

        if (string.IsNullOrEmpty(apiKey))
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        if (_client == null)
            _client = ChatService.CreateOpenAIClient(apiKey);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("Helpers.setDotNetHelper", dotNetHelper);
        }

        await JSRuntime.InvokeVoidAsync("scrollToBottom", "messages");
    }

    // 입력 내용이 변경될 때 호출되는 메서드
    private void OnInputChange(ChangeEventArgs e)
    {
        var newValue = e.Value?.ToString() ?? string.Empty;

        // 최대 길이를 초과하는 경우 잘라내기
        if (newValue.Length > _maxInputLength)
            newValue = newValue.Substring(0, _maxInputLength);

        _userInput = newValue;
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(_userInput) || _isStreaming)
            return;

        var userMessage = new ChatMessage { Content = _userInput, IsUser = true };
        _messages.Add(userMessage);

        var input = _userInput;
        _userInput = string.Empty;
        _isStreaming = true;
        _currentStreamedMessage = string.Empty;
        StateHasChanged();

        try
        {
            if (_client == null)
                throw new InvalidOperationException("Client is not initialized.");

            await JSRuntime.InvokeVoidAsync("scrollToBottom", "messages");

            await foreach (var chunk in ChatService.SendMessageStreamingAsync(_client, input, _sessionId))
            {
                _currentStreamedMessage += chunk;
                StateHasChanged();
            }

            _messages.Add(new ChatMessage { Content = _currentStreamedMessage, IsUser = false });
        }
        catch (Exception ex)
        {
            _messages.Add(new ChatMessage
                {
                    Content = $"오류가 발생했습니다: {ex.ToString()}",
                    IsUser = false
                });
        }
        finally
        {
            _isStreaming = false;
            _currentStreamedMessage = string.Empty;
            StateHasChanged();
        }
    }

    protected async Task Logout()
    {
        await JSRuntime.InvokeAsync<string>("localStorage.setItem", "openRouterApiKey", string.Empty);
        NavigationManager.NavigateTo("/");
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && e.ShiftKey == false)
        {
            await SendMessage();
            // 입력 필드에 다시 포커스 맞추기
            await JSRuntime.InvokeVoidAsync("document.getElementById", "chatTextArea").AsTask();
        }
    }

    private MarkupString FormatMessage(string markdown)
    {
        var html = string.Empty;

        if (string.IsNullOrWhiteSpace(markdown))
            return (MarkupString)html;

        // 마크다운을 HTML로 변환
        html = Markdown.ToHtml(markdown, _markdownPipeline);
        var document = _htmlParser.ParseDocument(html);

        if (document.Body == null)
        {
            Console.Error.WriteLine("Cannot parse fragment element.");
            return (MarkupString)html;
        }

        foreach (var eachAnchorElem in document.QuerySelectorAll("a"))
        {
            var currentHref = (eachAnchorElem.GetAttribute("href") ?? string.Empty).Trim();
            eachAnchorElem.RemoveAttribute("href");
            eachAnchorElem.SetAttribute("onclick", $"window.Helpers.openSandbox('{currentHref}');");
            eachAnchorElem.SetAttribute("style", "font-weight: bold; cursor: pointer;");
            eachAnchorElem.InnerHtml = $"<button>{WebUtility.HtmlEncode(currentHref)}</button>";
        }

        html = document.Body.InnerHtml;

        // 줄바꿈이 적용되지 않은 부분 처리 (마크다운에서 처리되지 않은 줄바꿈)
        return (MarkupString)html;
    }

    private Task ResetConversation()
    {
        _messages.Clear();
        ChatService.ClearSession(_sessionId);
        StateHasChanged();
        return Task.CompletedTask;
    }

    private class ChatMessage
    {
        public string Content { get; set; } = string.Empty;
        public bool IsUser { get; set; }
    }

    [JSInvokable("OpenSandbox")]
    public async Task OpenSandboxAsync(string url)
    {
        var xmlDoc = new XmlDocument();
        xmlDoc.LoadXml($@"
            <Configuration>
                <VGpu>Disable</VGpu>
                <LogonCommand>
                    <Command>explorer.exe {url}</Command>
                </LogonCommand>
            </Configuration>
            ");
        using var memStream = new MemoryStream();
        xmlDoc.Save(memStream);
        memStream.Seek(0L, SeekOrigin.Begin);

        await this.FileDownloader.DownloadFileAsync(memStream, "sandbox.wsb");
    }

    public void Dispose()
    {
        dotNetHelper?.Dispose();
    }
}